/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.si5.smarthome.am.shome.serializer;

import com.google.inject.Inject;
import fr.unice.polytech.si5.smarthome.am.shome.services.ShomeGrammarAccess;
import fr.unice.polytech.si5.smarthome.am.smart_home.Actor;
import fr.unice.polytech.si5.smarthome.am.smart_home.Condition;
import fr.unice.polytech.si5.smarthome.am.smart_home.Event;
import fr.unice.polytech.si5.smarthome.am.smart_home.Home;
import fr.unice.polytech.si5.smarthome.am.smart_home.Occurence;
import fr.unice.polytech.si5.smarthome.am.smart_home.SmartHomePackage;
import fr.unice.polytech.si5.smarthome.am.smart_home.Subject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ShomeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ShomeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SmartHomePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SmartHomePackage.ACTION:
				sequence_Action(context, (fr.unice.polytech.si5.smarthome.am.smart_home.Action) semanticObject); 
				return; 
			case SmartHomePackage.ACTOR:
				sequence_Actor(context, (Actor) semanticObject); 
				return; 
			case SmartHomePackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case SmartHomePackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case SmartHomePackage.HOME:
				sequence_Home(context, (Home) semanticObject); 
				return; 
			case SmartHomePackage.OCCURENCE:
				sequence_Occurence(context, (Occurence) semanticObject); 
				return; 
			case SmartHomePackage.SUBJECT:
				sequence_Subject(context, (Subject) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Action(ISerializationContext context, fr.unice.polytech.si5.smarthome.am.smart_home.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Actor returns Actor
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Actor(ISerializationContext context, Actor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActorAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (event=[Event|EString] actions+=[Action|EString] actions+=[Action|EString]*)
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (name=EString actor=[Actor|EString] action=[Action|EString])
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.EVENT__ACTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.EVENT__ACTOR));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.EVENT__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.EVENT__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEventAccess().getActorActorEStringParserRuleCall_3_0_1(), semanticObject.eGet(SmartHomePackage.Literals.EVENT__ACTOR, false));
		feeder.accept(grammarAccess.getEventAccess().getActionActionEStringParserRuleCall_5_0_1(), semanticObject.eGet(SmartHomePackage.Literals.EVENT__ACTION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Home returns Home
	 *
	 * Constraint:
	 *     (
	 *         ownedSubjects+=Subject 
	 *         ownedSubjects+=Subject* 
	 *         ownedActors+=Actor 
	 *         ownedActors+=Actor* 
	 *         ownedEvents+=Event 
	 *         ownedEvents+=Event* 
	 *         ownedConditions+=Condition 
	 *         ownedConditions+=Condition* 
	 *         ownedOccurences+=Occurence 
	 *         ownedOccurences+=Occurence*
	 *     )
	 */
	protected void sequence_Home(ISerializationContext context, Home semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Occurence returns Occurence
	 *
	 * Constraint:
	 *     (time=EDate? event=[Event|EString])
	 */
	protected void sequence_Occurence(ISerializationContext context, Occurence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Subject returns Subject
	 *
	 * Constraint:
	 *     (name=EString ownedActions+=Action ownedActions+=Action*)
	 */
	protected void sequence_Subject(ISerializationContext context, Subject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
